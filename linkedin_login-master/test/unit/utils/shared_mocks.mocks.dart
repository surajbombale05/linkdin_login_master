// Mocks generated by Mockito 5.4.2 from annotations
// in linkedin_login/test/unit/utils/shared_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:convert' as _i14;
import 'dart:typed_data' as _i15;

import 'package:http/http.dart' as _i6;
import 'package:linkedin_login/src/DAL/api/linked_in_api.dart' as _i4;
import 'package:linkedin_login/src/DAL/repo/authorization_repository.dart'
    as _i2;
import 'package:linkedin_login/src/DAL/repo/user_repository.dart' as _i3;
import 'package:linkedin_login/src/model/linked_in_user_model.dart' as _i8;
import 'package:linkedin_login/src/utils/configuration.dart' as _i5;
import 'package:linkedin_login/src/utils/scopes.dart' as _i13;
import 'package:linkedin_login/src/utils/startup/graph.dart' as _i11;
import 'package:linkedin_login/src/webview/controller_builder.dart' as _i7;
import 'package:linkedin_login/src/wrappers/authorization_code_response.dart'
    as _i9;
import 'package:linkedin_login/src/wrappers/linked_in_token_object.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthorizationRepository_0 extends _i1.SmartFake
    implements _i2.AuthorizationRepository {
  _FakeAuthorizationRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRepository_1 extends _i1.SmartFake
    implements _i3.UserRepository {
  _FakeUserRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinkedInApi_2 extends _i1.SmartFake implements _i4.LinkedInApi {
  _FakeLinkedInApi_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfig_3 extends _i1.SmartFake implements _i5.Config {
  _FakeConfig_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_4 extends _i1.SmartFake implements _i6.Client {
  _FakeClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebViewControllerBuilder_5 extends _i1.SmartFake
    implements _i7.WebViewControllerBuilder {
  _FakeWebViewControllerBuilder_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinkedInUserModel_6 extends _i1.SmartFake
    implements _i8.LinkedInUserModel {
  _FakeLinkedInUserModel_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthorizationCodeResponse_7 extends _i1.SmartFake
    implements _i9.AuthorizationCodeResponse {
  _FakeAuthorizationCodeResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinkedInTokenObject_8 extends _i1.SmartFake
    implements _i10.LinkedInTokenObject {
  _FakeLinkedInTokenObject_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_9 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_10 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Graph].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGraph extends _i1.Mock implements _i11.Graph {
  MockGraph() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthorizationRepository get authorizationRepository =>
      (super.noSuchMethod(
        Invocation.getter(#authorizationRepository),
        returnValue: _FakeAuthorizationRepository_0(
          this,
          Invocation.getter(#authorizationRepository),
        ),
      ) as _i2.AuthorizationRepository);

  @override
  _i3.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_1(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i3.UserRepository);

  @override
  _i4.LinkedInApi get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeLinkedInApi_2(
          this,
          Invocation.getter(#api),
        ),
      ) as _i4.LinkedInApi);

  @override
  _i5.Config get linkedInConfiguration => (super.noSuchMethod(
        Invocation.getter(#linkedInConfiguration),
        returnValue: _FakeConfig_3(
          this,
          Invocation.getter(#linkedInConfiguration),
        ),
      ) as _i5.Config);

  @override
  _i6.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_4(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i6.Client);

  @override
  _i7.WebViewControllerBuilder get webViewControllerBuilder =>
      (super.noSuchMethod(
        Invocation.getter(#webViewControllerBuilder),
        returnValue: _FakeWebViewControllerBuilder_5(
          this,
          Invocation.getter(#webViewControllerBuilder),
        ),
      ) as _i7.WebViewControllerBuilder);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LinkedInApi get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeLinkedInApi_2(
          this,
          Invocation.getter(#api),
        ),
      ) as _i4.LinkedInApi);

  @override
  _i12.Future<_i8.LinkedInUserModel> fetchProfile({
    required _i10.LinkedInTokenObject? token,
    required _i6.Client? client,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchProfile,
          [],
          {
            #token: token,
            #client: client,
          },
        ),
        returnValue:
            _i12.Future<_i8.LinkedInUserModel>.value(_FakeLinkedInUserModel_6(
          this,
          Invocation.method(
            #fetchProfile,
            [],
            {
              #token: token,
              #client: client,
            },
          ),
        )),
      ) as _i12.Future<_i8.LinkedInUserModel>);
}

/// A class which mocks [AuthorizationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationRepository extends _i1.Mock
    implements _i2.AuthorizationRepository {
  MockAuthorizationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LinkedInApi get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeLinkedInApi_2(
          this,
          Invocation.getter(#api),
        ),
      ) as _i4.LinkedInApi);

  @override
  _i12.Future<_i9.AuthorizationCodeResponse> fetchAccessTokenCode({
    required String? redirectedUrl,
    required String? clientSecret,
    required String? clientId,
    required String? clientState,
    required _i6.Client? client,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAccessTokenCode,
          [],
          {
            #redirectedUrl: redirectedUrl,
            #clientSecret: clientSecret,
            #clientId: clientId,
            #clientState: clientState,
            #client: client,
          },
        ),
        returnValue: _i12.Future<_i9.AuthorizationCodeResponse>.value(
            _FakeAuthorizationCodeResponse_7(
          this,
          Invocation.method(
            #fetchAccessTokenCode,
            [],
            {
              #redirectedUrl: redirectedUrl,
              #clientSecret: clientSecret,
              #clientId: clientId,
              #clientState: clientState,
              #client: client,
            },
          ),
        )),
      ) as _i12.Future<_i9.AuthorizationCodeResponse>);

  @override
  _i9.AuthorizationCodeResponse fetchAuthorizationCode({
    required String? redirectedUrl,
    required String? clientState,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAuthorizationCode,
          [],
          {
            #redirectedUrl: redirectedUrl,
            #clientState: clientState,
          },
        ),
        returnValue: _FakeAuthorizationCodeResponse_7(
          this,
          Invocation.method(
            #fetchAuthorizationCode,
            [],
            {
              #redirectedUrl: redirectedUrl,
              #clientState: clientState,
            },
          ),
        ),
      ) as _i9.AuthorizationCodeResponse);
}

/// A class which mocks [LinkedInApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinkedInApi extends _i1.Mock implements _i4.LinkedInApi {
  MockLinkedInApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i10.LinkedInTokenObject> login({
    required String? redirectUrl,
    required String? authCode,
    required String? clientSecret,
    required String? clientId,
    required _i6.Client? client,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #redirectUrl: redirectUrl,
            #authCode: authCode,
            #clientSecret: clientSecret,
            #clientId: clientId,
            #client: client,
          },
        ),
        returnValue: _i12.Future<_i10.LinkedInTokenObject>.value(
            _FakeLinkedInTokenObject_8(
          this,
          Invocation.method(
            #login,
            [],
            {
              #redirectUrl: redirectUrl,
              #authCode: authCode,
              #clientSecret: clientSecret,
              #clientId: clientId,
              #client: client,
            },
          ),
        )),
      ) as _i12.Future<_i10.LinkedInTokenObject>);

  @override
  String takeUrl(String? value) => (super.noSuchMethod(
        Invocation.method(
          #takeUrl,
          [value],
        ),
        returnValue: '',
      ) as String);

  @override
  _i12.Future<_i8.LinkedInUserModel> fetchUserInfo({
    required String? token,
    required _i6.Client? client,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserInfo,
          [],
          {
            #token: token,
            #client: client,
          },
        ),
        returnValue:
            _i12.Future<_i8.LinkedInUserModel>.value(_FakeLinkedInUserModel_6(
          this,
          Invocation.method(
            #fetchUserInfo,
            [],
            {
              #token: token,
              #client: client,
            },
          ),
        )),
      ) as _i12.Future<_i8.LinkedInUserModel>);
}

/// A class which mocks [Config].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfig extends _i1.Mock implements _i5.Config {
  MockConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: '',
      ) as String);

  @override
  String get initialUrl => (super.noSuchMethod(
        Invocation.getter(#initialUrl),
        returnValue: '',
      ) as String);

  @override
  String parseScopesToQueryParam(List<_i13.Scope>? scopes) =>
      (super.noSuchMethod(
        Invocation.method(
          #parseScopesToQueryParam,
          [scopes],
        ),
        returnValue: '',
      ) as String);

  @override
  bool isCurrentUrlMatchToRedirection(String? url) => (super.noSuchMethod(
        Invocation.method(
          #isCurrentUrlMatchToRedirection,
          [url],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i6.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i6.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<_i6.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i12.Future<_i6.Response>);

  @override
  _i12.Future<_i6.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<_i6.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i12.Future<_i6.Response>);

  @override
  _i12.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i6.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i6.Response>);

  @override
  _i12.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i6.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i6.Response>);

  @override
  _i12.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i6.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i6.Response>);

  @override
  _i12.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i6.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i6.Response>);

  @override
  _i12.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);

  @override
  _i12.Future<_i15.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
      ) as _i12.Future<_i15.Uint8List>);

  @override
  _i12.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i12.Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_10(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i12.Future<_i6.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
